swagger: "2.0"
info:
  title: Scify-CRM
  version: 1.0.0

tags:
  - name: account
    description: Authorization and account management
  - name: customer
    description: Customer management
  - name: event
    description: Event management
  - name: issue
    description: Service issue management

paths:
  /api/customer/add:
    parameters:
      - $ref: '#/parameters/jwtToken'
    post:
      tags: [ customer ]
      summary: Create customer
      operationId: addCustomer
      consumes: [ application/json ]
      parameters:
        - $ref: '#/parameters/customer'
      produces: [ application/json ]
      responses:
        401:
          $ref: '#/responses/401'
        200:
          description: API responding
          headers:
            XToken:
              type: string
              description: jwt token for authrization use
          schema:
            type: object
            properties:
              status:
                type: integer
                default: 200
              result:
                type: object
                properties:
                  added:
                    type: boolean
                  message:
                    type: string
                    description: message when failed to add
                  customer:
                    $ref: '#/definitions/Customer'
  /api/customer/id/{id}:
    parameters:
      - $ref: '#/parameters/jwtToken'
      - $ref: '#/parameters/id'
    get:
      tags: [ customer ]
      summary: Get a Customer by id
      operationId: getCustomer
      produces: [application/json]
      responses:
        401:
          $ref: '#/responses/401'
        200:
          description: API responding
          headers:
            XToken:
              type: string
              description: jwt token for authrization use
          schema:
            type: object
            properties:
              status:
                type: integer
                default: 200
              result:
                type: object
                properties:
                  got:
                    type: boolean
                  data:
                    $ref: '#/definitions/Customer'
    patch:
      tags: [ customer ]
      summary: Edit (partial) customer
      operationId: editCustomer
      consumes: [ application/json ]
      parameters:
        - $ref: '#/parameters/customer'
      produces: [ application/json ]
      responses:
        401:
          $ref: '#/responses/401'
        200:
          description: API responding
          headers:
            XToken:
              type: string
              description: jwt token for authrization use
          schema:
            type: object
            properties:
              status:
                type: integer
                default: 200
              result:
                type: object
                properties:
                  edited:
                    type: boolean
                  message:
                    type: string
                    description: message when failed to edit
                  customer:
                    $ref: '#/definitions/Customer'
    delete:
      tags: [ customer ]
      summary: Delete customer
      operationId: deleteCustomer
      produces: [ application/json ]
      responses:
        401:
          $ref: '#/responses/401'
        200:
          description: API responding
          headers:
            XToken:
              type: string
              description: jwt token for authrization use
          schema:
            type: object
            properties:
              status:
                type: integer
                default: 200
              result:
                type: object
                properties:
                  deleted:
                    type: boolean
                  customer:
                    $ref: '#/definitions/CustomerNoId'

parameters:
  jwtToken:
    name: "token"
    in: "header"
    type: "string"
    description: "JWT Token with prefix 'Bearer'. Example: `Bearer some.jwt.token`"
  id:
    name: "id"
    in: "path"
    required: true
    type: "string"
    description: "the unique id"
  customer:
    name: "customer"
    in: "body"
    description: "the customer data"
    required: true
    schema:
      $ref: '#/definitions/CustomerNoId'

responses:
  401:
    description: "Unauthorized"

definitions:
  Customer:
    type: object
    required: [ _id, name, company, position, mobile, email, description ]
    properties:
      _id:
        $ref: '#/definitions/CustomerId'
      name:
        type: string
        example: John Doe
      photo:
        $ref: '#/definitions/Photo'
      mobile:
        $ref: '#/definitions/Mobile'
      email:
        $ref: '#/definitions/Email'
      age:
        type: integer
        example: 20
      description:
        type: string
        example: John Doe is good
      company:
        type: string
        example: SomeBigCompany
      position:
        type: string
        example: HR
  CustomerNoId:
    type: object
    properties:
      name:
        type: string
        example: John Doe
      photo:
        $ref: '#/definitions/Photo'
      mobile:
        $ref: '#/definitions/Mobile'
      email:
        $ref: '#/definitions/Email'
      age:
        type: integer
        example: 20
      description:
        type: string
        example: John Doe is good
      company:
        type: string
        example: SomeBigCompany
      position:
        type: string
        example: HR
  CustomerId:
    type: string
    description: unique id of customers
    example: 614ac87f3f8bf4a511174da9
  Event:
    type: object
    required:
      - _id
      - customer
      - title
      - datetime
    properties:
      _id:
        $ref: '#/definitions/EventId'
      customer:
        $ref: '#/definitions/CustomerId'
      title:
        type: string
        example: meet with the boss
      description:
        type: string
        example: talk about unhiring him
      datetime:
        $ref: '#/definitions/DateTime'
      endTime:
        $ref: '#/definitions/DateTime'
      venue:
        type: string
        example: meeting room 1
      phtots:
        type: array
        items:
          $ref: '#/definitions/Photo'
  EventId:
    type: string
    description: unique id of events
    example: 6151daba8f7400e8047d068e
  ServiceIssue:
    type: object
    required:
      - _id
      - title
      - customer
      - description
      - state
    properties:
      _id:
        $ref: '#/definitions/IssueId'
      customer:
        $ref: '#/definitions/CustomerId'
      title:
        type: string
        example: resolve something with bla
      description:
        type: string
        example: do blabla with customer blabla
      state:
        type: string
        enum: [ Upcoming, Ongoing, Completed ]
      pinned:
        type: boolean
        default: false
        description: mark importance of issue
  IssueId:
    type: string
    description: unique id of service issues
    example: 61505bd7ffc3f96cd297a7e7
  Photo:
    type: string
    description: An public url of an image (relative or absolute)
    example: '/files/e17c1e7056d31724e3a'
  Mobile:
    type: string
    example: '0404000000'
    description: Australian mobile number
  Email:
    type: string
    example: example@mail.com
  DateTime:
    type: string
    format: date-time
    example: 2016-08-29T09:12:33.001Z
    description: ISODate